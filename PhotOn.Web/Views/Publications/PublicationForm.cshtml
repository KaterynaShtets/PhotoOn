@model PhotOn.Web.ViewModels.PublicationViewModel
@{
    ViewData["Title"] = "PublicationForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@Model.PageTitle</h1>

@using (Html.BeginForm("Save", "Publications", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="form-row">
        <span id="output">
            @if (!Model.IsNewCreated)
            {
                <img src="@Model.ImageLink" class="img-add-publication" alt="New Part" />
            }
        </span>
    </div>
    <hr />
    <div class="form-group img-upload-car-button">
        @Html.LabelFor(m => m.Picture, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
        @Html.TextBoxFor(m => m.Picture, htmlAttributes: new { @type = "file", @class = "form-control-sm", @id = "file", @accept = "image/png" })
        @Html.ValidationMessageFor(m => m.Picture)
        <p></p>
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.Title, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
        @Html.TextBoxFor(c => c.Title, htmlAttributes: new { @class = "form-control form-control-sm" })
        @Html.ValidationMessageFor(c => c.Title)
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.TextDescription, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
        @Html.TextAreaFor(c => c.TextDescription, htmlAttributes: new { @class = "form-control form-control-sm" })
        @Html.ValidationMessageFor(c => c.TextDescription)
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.Season, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
        <select asp-for="Season" asp-items="Html.GetEnumSelectList<PhotOn.Core.Entities.TimeOfTheYear>()">
            <option selected="selected" value="">Please select</option>
        </select>
        @Html.ValidationMessageFor(c => c.Season)
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.Price, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
        @Html.TextBoxFor(c => c.Price, htmlAttributes: new { @class = "form-control form-control-sm" })
        @Html.ValidationMessageFor(c => c.Price)
    </div>

    @*equipment*@
    <div class="form-group">
        @Html.LabelFor(c => c.EquipmentModels, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
        <div class="row">
            <div class="col-sm-8" id="inputs_eq">
                <input type="text" name="EquipmentModels[0].Title" value="" class="input-group-text" />
            </div>
            <div class="col-sm-4">
                <input type="button" id="add_eq" value="add" class="btn btn-success">
            </div>
        </div>
    </div>

    @*tags*@
    <div class="form-group">
        @Html.LabelFor(c => c.TagModels, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
        <div class="row">
            <div class="col-sm-8" id="inputs_tag">
                <input type="text" name="TagModels[0].Title" value="" class="input-group-text" />
            </div>
            <div class="col-sm-4">
                <input type="button" id="add_tag" value="add" class="btn btn-success">
            </div>
        </div>
    </div>


    <input type="hidden" name="coordX">
    <input type="hidden" name="coordY">
    <input type="submit" id="real_submit" style="display: none;">
    <input type="button" id="fake_submit" value="Save">

    @Html.HiddenFor(c => c.Id)
    // здесь дописать скрытые поля для всех данных, что не изменяются
    @*@Html.HiddenFor(c => c.DateOfAdding)*@
    @Html.AntiForgeryToken()
}
@section scripts
{
    <script>
        function clearChild() {
            var span = document.getElementById('output');
            while (span.hasChildNodes()) {
                span.removeChild(span.firstChild);
            }
        }
        function handleFileSelect(evt) {
            var file = evt.target.files; // FileList object
            var f = file[0];
            // Only process image files.
            if (!f.type.match('image.*')) {
                alert("Image only please....");
                return;
            }
            var reader = new FileReader();
            // Closure to capture the file information.
            reader.onload = (function (theFile) {
                return function (e) {
                    // Render thumbnail.
                    clearChild();
                    document.getElementById('output').innerHTML = ['<img class="img-add-publication" title="', escape(theFile.name), '" src="', e.target.result, '" />'].join('');
                };
            })(f);
            // Read in the image file as a data URL.
            reader.readAsDataURL(f);
        }
        document.getElementById('file').addEventListener('change', handleFileSelect, false);
    </script>

    <script>
        const real_submit = document.getElementById('real_submit');
        const form = document.getElementsByTagName('form')[0];
        document.getElementById('fake_submit').addEventListener('click', () => {
            const coords = map_input.getCoords();
            form.coordX.value = coords.lat;
            form.coordY.value = coords.lng;
            real_submit.click();
        });
    </script>

    <script>
        const root_eq = document.getElementById('inputs_eq');
        let count_value_eq = 1;

        document.getElementById('add_eq').addEventListener('click', () => {
            addInputField_eq(root_eq, count_value_eq++);
        })

        function addInputField_eq(root, id) {
            let inp = document.createElement('input');
            inp.type = 'text';
            inp.name = 'EquipmentModels[' + id + '].Title';
            inp.className = 'input-group-text';
            root.appendChild(inp);
        }
    </script>

    <script>
        const root_tag = document.getElementById('inputs_tag');
        let count_value_tag = 1;

        document.getElementById('add_tag').addEventListener('click', () => {
            addInputField_tag(root_tag, count_value_tag++);
        })

        function addInputField_tag(root, id) {
            let inp = document.createElement('input');
            inp.type = 'text';
            inp.name = 'TagModels[' + id + '].Title';
            inp.className = 'input-group-text';
            root.appendChild(inp);
        }
    </script>
}